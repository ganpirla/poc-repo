trigger:
- main  # Adjust according to your branch

pr:
- main

jobs:
- job: RollingBouncePods
  displayName: 'Rolling Bounce Pods'
  pool:
    vmImage: 'ubuntu-latest'

  steps:
  # Step 1: Install Azure CLI and Kubectl
  - task: UseAzureCLI@2
    inputs:
      azureSubscription: '$(azureSubscription)'  # Azure DevOps service connection
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        # Install kubectl if not available
        az aks get-credentials --resource-group $(resourceGroup) --name $(aksCluster)
        kubectl version --client
        
  # Step 2: Get the current list of pods in your deployment
  - script: |
      echo "Fetching pods"
      kubectl get pods -l app=$(appLabel) -o custom-columns=":metadata.name" > pods.txt
      cat pods.txt
    displayName: 'Get Pod List'

  # Step 3: Delete half the pods (adjust the logic based on your requirements)
  - script: |
      # Get the list of pod names
      PODS=($(cat pods.txt))
      TOTAL_PODS=${#PODS[@]}
      HALF_PODS=$((TOTAL_PODS / 2))

      echo "Deleting the first half of the pods..."
      for (( i=0; i<$HALF_PODS; i++ )); do
        kubectl delete pod ${PODS[$i]}
        echo "Deleted pod: ${PODS[$i]}"
      done
    displayName: 'Delete First Half of Pods'

  # Step 4: Wait for the deleted pods to be recreated and become healthy
  - script: |
      echo "Waiting for the deleted pods to be replaced and healthy..."
      kubectl rollout status deployment $(deploymentName) --timeout=600s
    displayName: 'Wait for Rollout to Complete'

  # Step 5: Delete the remaining half of the pods
  - script: |
      echo "Deleting the remaining half of the pods..."
      for (( i=$HALF_PODS; i<$TOTAL_PODS; i++ )); do
        kubectl delete pod ${PODS[$i]}
        echo "Deleted pod: ${PODS[$i]}"
      done
    displayName: 'Delete Remaining Half of Pods'

  # Step 6: Wait for the remaining pods to become healthy
  - script: |
      echo "Waiting for the remaining pods to become healthy..."
      kubectl rollout status deployment $(deploymentName) --timeout=600s
    displayName: 'Wait for Final Rollout to Complete'

